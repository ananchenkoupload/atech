{% if page.metafields.page_faq.title.size > 0 %}

    {% if page.metafields.faq.title != blank %}
        <h1 class="h4">{{ page.metafields.faq.title| escape }}</h1>
    {% endif %}

    {% assign faq_cats = '' | split: '-' %}
    {% for block in page.metafields.faq_category.faq_category %}
        {% unless faq_cats contains page.metafields.faq_category.faq_category[forloop.index0]  %}
            {% assign faq_cats_name =page.metafields.faq_category.faq_category[forloop.index0] | split: '-' %}
            {% assign faq_cats = faq_cats | concat: faq_cats_name %}
        {% endunless %}
    {% endfor %}


    {% for faq_cat in faq_cats %}
        <div class="faq-cat-wrapper">
            <h2 class="h4">{{ faq_cat }}</h2>
            {% for q in page.metafields.page_faq.title %}
                {% if page.metafields.faq_category.faq_category[forloop.index0] == faq_cat %}
                    <div itemscope itemprop="mainEntity" itemtype="https://schema.org/Question">
                        <h3 class="accordion {% if page.metafields.faq_video.faq_video[forloop.index0] != blank %}has-video{% endif %}" itemprop="name">{{ page.metafields.page_faq.title[forloop.index0] | escape }}</h3>
                        <div class="panel" itemscope itemprop="acceptedAnswer" itemtype="https://schema.org/Answer">
                            <div itemprop="text">
                                {{ page.metafields.page_faq.description[forloop.index0] }}

                                {% if page.metafields.faq_video.faq_video[forloop.index0] != blank %}
                                    <div class="video-wrapper-custom">
                                        {{ page.metafields.faq_video.faq_video[forloop.index0] }}
                                    </div>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                {% endif %}
            {% endfor %}
        </div>
    {% endfor %}
    
{% endif %}


<script type="text/javascript">
/* Video Popup Plugin https://www.jqueryscript.net/other/Vimeo-Youtube-Video-Popup-Plugin-jQuery.html */
(function($) {
    $.fn.videoPopup = function(options) {
        var videoPopup = {
            embedLink: ''
        }

        var settings = $.extend({
            autoplay: false,
            showControls: true,
            controlsColor: null,
            loopVideo: false,
            showVideoInformations: true,
            width: null,
            customOptions: {}
        }, options);

        var parsers = {
            youtube: {
                regex: /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/,
                test: function (videoUrl, regex) {
                    var match = videoUrl.match(regex);
                    return (match && match[7].length==11) ? match[7] : false;
                },
                mount: function (videoCode) {
                    var youtubeOptions = { 
                        autoplay: settings.autoplay,
                        color: settings.controlsColor,
                        loop: settings.loopVideo,
                        controls: settings.showControls,
                        showinfo: settings.showVideoInformations,
                    }

                    Object.assign(youtubeOptions, settings.customOptions);
                    
                    return "https://www.youtube.com/embed/"+videoCode+"/?"+$.param(youtubeOptions);
                }
            },
            vimeo: {
                regex: /^.*(vimeo\.com\/)((channels\/[A-z]+\/)|(groups\/[A-z]+\/videos\/))?([0-9]+)/,
                test: function (videoUrl, regex) {
                    var match = videoUrl.match(regex);
                    return (match && match[5].length) ? match[5] : false;
                },
                mount: function (videoCode) {
                    var vimeoOptions = {
                        autoplay: settings.autoplay,
                        color: settings.controlsColor,
                        loop: settings.loopVideo,
                        controls: settings.showControls,
                        title: settings.showVideoInformations,
                    }

                    Object.assign(vimeoOptions, settings.customOptions);
                    
                    return "https://player.vimeo.com/video/"+videoCode+"/?"+$.param(vimeoOptions);
                }
            }
        }
        
        function mountEmbedLink(videoUrl) {
            $.each(parsers, function(index, parser){
                var videoCode = parser.test(videoUrl, parser.regex);
                
                if(videoCode) {
                    videoPopup.embedLink = parser.mount(videoCode);
                    return this;
                }
            })
        }

        function mountIframe() {
            var iframeElement = '<iframe src="'+videoPopup.embedLink+'" allowfullscreen frameborder="0" width="'+settings.width+'"></iframe>';

            if(!videoPopup.embedLink) {
                iframeElement = '<div class="videopopupjs__block--notfound">Video not found</div>';
            }

            return '<div class="videopopupjs videopopupjs--animation">'+
                        '<div class="videopopupjs__content">'+
                            '<span class="videopopupjs__close"></span>'+
                            iframeElement+
                        '</div>'+
                    '</div>';
        }

        $(this).css('cursor', 'pointer');
        $(this).on('click', function (event) {
            event.preventDefault();
            
            var videoUrl = $(this).attr("href");
            var videoIframe = mountEmbedLink(videoUrl);

            $("body").append(mountIframe());

            $('.videopopupjs__content').css('max-width', 700);
            if(settings.width) {
                $('.videopopupjs__content').css('max-width', settings.width);
            }

            if($('.videopopupjs').hasClass('videopopupjs--animation')){
                setTimeout(function() {
                    $('.videopopupjs').removeClass("videopopupjs--animation");
                }, 200);
            }

            $(".videopopupjs, .videopopupjs__close").click(function(){
                $(".videopopupjs").addClass("videopopupjs--hide").delay(515).queue(function() { $(this).remove(); });
            });
        });

        $(document).keyup(function(event) {
            if (event.keyCode == 27){
                $('.videopopupjs__close').click();
            }
        });

        return this;
    };
}(jQuery));
/* END Video Popup Plugin */

/* Video Popup Init */
$('a[href*="vimeo"]').videoPopup();
/* END Video Popup Init */

/* Accordion */
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
    acc[i].addEventListener("click", function() {
        this.classList.toggle("active");
        var panel = this.nextElementSibling;
        if (panel.style.maxHeight) {
            panel.style.maxHeight = null;
        } else {
            panel.style.maxHeight = panel.scrollHeight + "px";
        } 
    });
}
/* END Accordion */
</script>

{% schema %}
{
  "name": "FAQ",
  "class": "faq-section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title"
    }
  ],
  "blocks": [
    {
      "type": "faq_block",
      "name": "FAQ",
      "settings": [
        {
          "type": "text",
          "id": "category_name",
          "label": "Category name"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Q"
        },
        {
          "type": "richtext",
          "id": "a",
          "label": "A"
        },
        {
          "type": "html",
          "id": "video",
          "label": "Vimeo iframe code"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "FAQ",
      "category": "FAQ"
    }
  ]
}
{% endschema %}
