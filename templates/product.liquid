{% comment %}
  The contents of the product.liquid template can be found in /sections/product-template.liquid
{% endcomment %}

{% section 'product-template' %}

{% comment %}
{% if collection %}
  <div class="text-center return-link-wrapper page-width">
    <a href="{{ collection.url }}" class="btn btn--secondary btn--has-icon-before return-link">
      {% include 'icon-arrow-left' %}
      {{ 'products.product.back_to_collection' | t: title: collection.title }}
    </a>
  </div>
{% endif %}
{% endcomment %}

<script>
  // Override default values of shop.strings for each template.
  // Alternate product templates can change values of
  // add to cart button, sold out, and unavailable states here.
  theme.productStrings = {
    addToCart: {{ 'products.product.add_to_cart' | t | json }},
    soldOut: {{ 'products.product.sold_out' | t | json }},
    unavailable: {{ 'products.product.unavailable' | t | json }}
  }
</script>
{{ 'option_selection.js' | asset_url | script_tag }}
<script>
  var selectCallback = function(variant, selector) {
    // BEGIN SWATCHES
    var form = jQuery('#' + selector.domIdPrefix).closest('form');
    var radioButton;
    if (variant) {
      for (var i = 0, length = variant.options.length; i < length; i++) {
        radioButton = form.find('.swatch[data-option-index="' + i + '"] :radio[value="' + variant.options[i].replace(/(['"])/g, "\\$1") +'"]');
        if (radioButton.length) {
          radioButton.get(0).checked = true;
        }

      }
    }
    // END SWATCHES
    if (variant && variant.available) {
      jQuery('#add-to-cart').removeAttr('disabled').removeClass('disabled'); // remove unavailable class from add-to-cart button, and re-enable button
      if(variant.price < variant.compare_at_price){
        jQuery('#price-preview').html(Shopify.formatMoney(variant.price, "") + " <del>" + Shopify.formatMoney(variant.compare_at_price, "") + "</del>");
      } else {
        jQuery('#price-preview').html(Shopify.formatMoney(variant.price, ""));
      }
    } else {
      jQuery('#add-to-cart').addClass('disabled').attr('disabled', 'disabled'); // set add-to-cart button to unavailable class and disable button
      var message = variant ? "Sold Out" : "Unavailable";
      jQuery('#price-preview').text(message);
    }

    $('document').ready(function() {
      var variant_img = variant.featured_media.id;
      var current_img = $('.slick-active').data('image-id');

      if (variant_img) {
        if (variant_img != current_img) {
          var target_image_id = $('.slick-slide[data-image-id*="'+ variant_img +'"]').data('slick-index');
          $('.productsingle-slider').slick('slickGoTo', target_image_id);
        }
      }
    })

    //console.log(variant.featured_media.id);


  };

  jQuery(document).ready(function($){
    new Shopify.OptionSelectors("product-select", { product: {{ product | json }}, onVariantSelected: selectCallback });
  });
  //End product-options script
</script>
<script>
  jQuery(function() {
    jQuery('.swatch :radio').change(function() {
      var optionIndex = jQuery(this).closest('.swatch').attr('data-option-index');
      var optionValue = jQuery(this).val();
      jQuery(this)
              .closest('form')
              .find('.single-option-selector')
              .eq(optionIndex)
              .val(optionValue)
              .trigger('change');
    });
  });
</script>

<script>
  $(window).on('load', function() {
    console.log('test');
    jQuery('.trigger-click label').trigger('click');
    /*var variant_img = jQuery('.trigger-click').data('variant-image');
    var target_image_id = $('.slick-slide[data-image-id*="'+ variant_img +'"]').data('slick-index');
    console.log(variant_img);
    console.log(target_image_id);
    $('.productsingle-slider').slick('slickGoTo', target_image_id);*/
  });
</script>

{% assign current_variant = product.selected_or_first_available_variant %}

<meta itemprop='itemReviewed' content='{{product.title}}'>




{% assign enroute_product = all_products[settings.enroute_product] %}
{% assign id = enroute_product.variants.first.id %}
{% assign price = enroute_product.price | money %}

{% assign bcpP = enroute_product.variants.first.id %}
{% assign bcpR = enroute_product.price | money  %}

{% assign threshold_2 = settings.threshold_2 | plus: 0 %}
{% assign enroute_product_2 = all_products[settings.enroute_product_2] %}
{% assign enroute_product_2_price = enroute_product_2.price | money %}
{% assign enroute_product_2_id = enroute_product_2.variants.first.id %}

{% assign threshold_3 = settings.threshold_3 | plus: 0 %}
{% assign enroute_product_3 = all_products[settings.enroute_product_3] %}
{% assign enroute_product_3_price = enroute_product_3.price | money %}
{% assign enroute_product_3_id = enroute_product_3.variants.first.id %}

{% assign threshold_4 = settings.threshold_4 | plus: 0 %}
{% assign enroute_product_4 = all_products[settings.enroute_product_4] %}
{% assign enroute_product_4_price = enroute_product_4.price | money %}
{% assign enroute_product_4_id = enroute_product_4.variants.first.id %}

{% assign total_price = cart.total_price | divided_by: 100 %}

{% if total_price >= threshold_2 and total_price < threshold_3 %}
  {% assign enroute_product = enroute_product_2 %}
  {% assign price = enroute_product_2_price %}
  {% assign id = enroute_product_2_id %}
{% elsif total_price >= threshold_3 and total_price < threshold_4 %}
  {% assign enroute_product = enroute_product_3 %}
  {% assign price = enroute_product_3_price %}
  {% assign id = enroute_product_3_id %}
{% elsif total_price >= threshold_4 %}
  {% assign enroute_product = enroute_product_4 %}
  {% assign price = enroute_product_4_price %}
  {% assign id = enroute_product_4_id %}
{% endif %}


<script>

  var product = {{id}};

  var priceIt = '{{price}}';

  var flagO = true;

  var flagI = true;

  const bacKr = {{bcpP}},
          bacKp = '{{bcpR}}';

  function recalcEnrouteTRK(flagChangeO,flagChangeI) {


    if (flagChangeO !== undefined) {
      flagO = true;
    }

    if (flagChangeI !== undefined) {
      flagI = true;
    }

    setTimeout(function(){
      jQuery.getJSON('/cart.js', function(cart) {

        var total_price = cart.total_price / 100;
        var threshold_2 = {{ threshold_2 }};

        console.log('huutus')

        console.log(total_price)

        if (total_price < {{threshold_2}}) {
          product = bacKr;
          priceIt = bacKp;
          console.log('price one')
        } else if (total_price > {{threshold_2}} && total_price < {{threshold_3}}) {
          product = {{enroute_product_2_id}};
          priceIt = '{{enroute_product_2_price}}';
          if (flagO == true) {
            console.log('changing tw')
            if ($('div#is-a-gift .tt').hasClass('m-active')) {
              $('div#is-a-gift .tt').removeClass('m-active');
              console.log('rmv 1')
            }
            flagO = false;
          }
          console.log('price two')
        } else if (total_price > {{threshold_3}} && total_price < {{threshold_4}}) {
          product = {{enroute_product_3_id}};
          priceIt = '{{enroute_product_3_price}}';
          if (flagO == true) {
            console.log('changing tw')
            if ($('div#is-a-gift .tt').hasClass('m-active')) {
              $('div#is-a-gift .tt').removeClass('m-active');
              console.log('rmv 1')
            }
            flagO = false;
          }
          console.log('price three')
        } else if (total_price > {{threshold_4}}) {
          product = {{enroute_product_4_id}};
          priceIt = '{{enroute_product_4_price}}';
          if (flagI == true) {
            console.log('changing thr')
            if ($('div#is-a-gift .tt').hasClass('m-active')) {
              $('div#is-a-gift .tt').removeClass('m-active');
              console.log('rmv 2')
            }
            flagI = false;
          }
          console.log('price four')
        }

        if (flagChangeO == false && flagChangeI == false) {
          product = bacKr;
          priceIt = bacKp;
          console.log(product, priceIt)
        }

        console.log(priceIt)

        $('#is-a-gift label.tt').html('<input id="enroute" type="checkbox" name="attributes[enroute]" value="yes" style="float: none" /><span class="fake-checkbox"></span>Add AROMATECH Full Coverage Shipping Insurance for <span class="enroute-price">' + priceIt + '</span><span class="tooltiptext">Optional full shipping coverage starting at a low fee that effortlessly resolve any shipment issues. Lost, damaged, or stolen items are easily taken care of by contacting our Customer Service.</span>');

      });
    }, 500);

  }

  function recalcEnroutePr() {

    Shopify.Cart = Shopify.Cart || {};
    Shopify.Cart.GiftWrap = {};

    $(document).on("click",".ajax-cart-item__quantity-button",function(event) {

      recalcEnrouteTRK()

    });

    recalcEnrouteTRK()

    Shopify.Cart.GiftWrap.remove2 = function() {

      let nubmerCr = parseInt(product);

      let rmIte = $('.cart__row[data-id="'+nubmerCr+'"]');
      $('.ajax-cart-summary.ajax-cart-enroute').addClass('m-stack')
      jQuery.ajax({
        type: 'POST',
        url: '/cart/change.js',
        data: { quantity: 0, id: nubmerCr },
        dataType: 'json',
        success: function() {
          fetchCart();
          setTimeout(function(){
            $('.ajax-cart-summary.ajax-cart-enroute').removeClass('m-stack')
          }, 500);
        }
      });
    }

    Shopify.Cart.GiftWrap.set2 = function() {

      var headers = new Headers({ 'Content-Type': 'application/json' });

      var indexCr = $('.cart tbody .cart__row').length;

      let nubmerCr = parseInt(product);
      $('.ajax-cart-summary.ajax-cart-enroute').addClass('m-stack')
      $.ajax({
        type: 'POST',
        url: '/cart/add.js',
        data: {
          quantity: 1,
          id: nubmerCr,
          properties: { 'enroute': true }
        },
        dataType: 'json',
        success: function (locProduct) {
          fetchCart();
          setTimeout(function(){
            $('.ajax-cart-summary.ajax-cart-enroute').removeClass('m-stack')
          }, 500);
        }
      });

    }

    $.fn.hasAttr = function(name) {
      return this.attr(name) !== undefined;
    };

    $('.cart-table .cart__row').each(function (){
      let crItm = $(this)
      if (crItm.attr('data-enroute') == true){
        $('div#is-a-gift .tt').addClass('m-active');
        $('div#is-a-gift .tt #enroute').prop('checked', true);
        console.log('added class rmv')
      }
    });


    $(document).on("change","div#is-a-gift .tt #enroute",function(event) {
      console.log('chngng')
      if ($('div#is-a-gift .tt').hasClass('m-active')) {
        console.log('rmv 3')
        Shopify.Cart.GiftWrap.remove2();
        $('div#is-a-gift .tt').removeClass('m-active');
        setTimeout(function() {
          let counterCart = parseInt($('.js-ajax-cart-counter-header').text())
          if (counterCart < 1) {
            $('.site-header__cart-count').addClass('_hide')
          }
        }, 700);
      } else {
        Shopify.Cart.GiftWrap.set2();
        $(' div#is-a-gift .tt').addClass('m-active');
      }

      recalcEnrouteTRK()
    });
  }

  recalcEnroutePr()

</script>